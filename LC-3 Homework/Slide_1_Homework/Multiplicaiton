.ORIG x3000
in1          .STRINGZ "Input an integer: a = "
in2          .STRINGZ "Input an integer: b = "
                 AND R0, R0, #0
                 ST  R0, var
                 ST  R0, sign
                 LEA R0, in1
                 PUTS
                 JSR INPUT
                 LEA R7, #2
                 ADD R1, R6, #0
                 BRn ABS_R1
                 ST  R1, num1

                 LD  R0, var
                 ADD R0, R0, #1
                 ST  R0, var
                 LEA R0, in2
                 PUTS
                 JSR INPUT
                 LEA R7, #2
                 ADD R2, R6, #0
                 BRn ABS_R2
                 ST R2, num2

                 JSR R1_X_R2
                 LEA R0, result
                 PUTS
                 LD  R6, temp
                 LD  R0, sign
                 ADD R0, R0, #-1
                 BRnp RESULT
                 NOT R6, R6
                 ADD R6, R6, #1
RESULT           JSR OUTPUT
                 HALT


R1_X_R2          AND R3, R3, #0         ; R3 = 0
MULTIPLY         ADD R3, R3, R1         ; R3 = R3 + R1
                 ST  R3, temp
                 LD  R0, idk
                 NOT R0, R0
                 AND R3, R3, R0
                 NOT R3, R3
                 ADD R3, R3, #1
                 LD  R0, temp
                 ADD R3, R3, R0
                 BRnp ERROR_LIMIT
                 LD  R3, temp
                 ADD R2, R2, #-1
                 BRp MULTIPLY        
                 ST  R3, temp
                 RET

ERROR_LIMIT      LEA R0, error_limit
                 PUTS
                 HALT

ABS_R1           NOT R1, R1 
                 ADD R1, R1, #1
                 LD  R0, sign
                 ADD R0, R0, #1
                 ST  R0, sign
                 RET

ABS_R2           NOT R2, R2 
                 ADD R2, R2, #1
                 LD  R0, sign
                 ADD R0, R0, #1
                 ST  R0, sign
                 RET


result      .STRINGZ "\nThe product result: "
error_limit .STRINGZ "\nThe result is off limit"
num1         .BLKW x0001
num2         .BLKW x0001
sign         .BLKW x0001
temp         .BLKW x0001
idk          .FILL #32768


INPUT            ST  R7, SAVE_2     ; Store return address
INITIAL_LOOP     AND R6, R6, #0     ; make sure R6 = 0
                 AND R0, R0, #0    
                 ST  R0, flag       ; flag = 0: the input expected to be unsigned
                 GETC
                 OUT
                 ST  R0, tmp        ; If R0 is a digit, save it and check it later
                 ADD R0, R0, #-15   ; Because ADD instruction immediate field is between -16 and 15
                 ADD R0, R0, #-15
                 ADD R0, R0, #-15   ; Overall : R0 = R0 - 45  (check for '-' character)
                 BRz IS_SIGNED
                 JSR INITAL_JUMP    ; if not '-' character, continue inputing, but firstly, check whether the current character a number or non-number.

IS_SIGNED        AND R0, R0, #0
                 ADD R0, R0, #1
                 ST  R0, flag       ; flag = 1: the current inputing number is signed
                 JSR MAIN_LOOP

MAIN_LOOP        GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 ADD R0, R0, #-10   ; Check for newline character (ASCII 10)
                 BRz PRE_EXIT       ; If true, stop inputing and exit
INITAL_JUMP      JSR CHECK          ; JUMP TO CHECK subroutine to check for non-numberic chars
                 JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; After CHECK, tmp already store the De_ASCIIed number
                 ADD R6, R6, R0     ; After each INPUT loop: R6 = (R6 x10) +  R0
; This part examine cases to check for Out of Range                 
                 ADD R7, R6, #0     ; R7 = R6  (we don't need R7 to return anywhere)
                 NOT R7, R7
                 ADD R7, R7, #1
                 LD  R0, four_dig   ; R0 = 3276  
                 ADD R7, R0, R7     ; R7 = 3276 - R6     (R6 = R7)
                 BRz LAST_DIGIT
                 BRp MAIN_LOOP      ; if R6 < 3276, fith digit with no restriction
WAIT_ENTER       GETC               ; else check for "enter"
                 OUT                
                 ST  R0, tmp        
                 ADD R0, R0, #-10 
                 BRz PRE_EXIT
                 JSR CHECK          ; any other character include number input is ERROR, or EXCEED if its a number
                 JSR EXCEEDED       

LAST_DIGIT       GETC      
                 OUT
                 ST  R0, tmp        
                 ADD R0, R0, #-10  
                 BRz PRE_EXIT       
                 JSR CHECK
                 LD  R7, flag
                 ADD R7, R7, #-1    ; check for current number is signed
                 BRz EXCEED_SIGNED  ; if true last digit limit is 8
                 LD  R7, tmp        ;             
                 ADD R7, R7, #-7    ; else last digit limit is 7
                 BRp EXCEEDED       ; "EXCEED" error message and prompt user
                 JSR ACCEPT         ; else accepts last digit

EXCEED_SIGNED    LD  R7, tmp        ; R7 last digit (already De_ASCII)
                 ADD R7, R7, #-8
                 BRp EXCEEDED            
ACCEPT           JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; Load number
                 ADD R6, R6, R0     
                 JSR WAIT_ENTER     ; WAIT for enter, or check for any other input (surely will lead to EXCEEDED or ERROR

X10_R6           ADD R0, R6, #0     ; R0 = R6 = a = tmp2 ,   a is initial value of R6
                 ST  R0, tmp2
                 AND R6, R6, #0     ; R6 = 0   
                 LD  R0, TEN        ; R0 = 10
X_LOOP           ST  R0, tmp3       
                 LD  R0, tmp2       ; tmp2 = a
                 ADD R6, R6, R0     ; R6 = R6 + a
                 LD  R0, tmp3       ; tmp3 initally = 10 
                 ADD R0, R0, #-1    ; tmp3--    
                 BRp X_LOOP         ; While R4 > 0, keeping adding 'a' to R6
                 RET                ; else Return
                 
; CHECK Subroutine note: tmp initally store inputed character, tmp2 store return address
CHECK            ST  R7, tmp2
                 LD  R7, tmp        ; 
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 ST  R0, tmp        ; For convenient, store the De_ASCIIed number
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 9
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
                 LD  R7, tmp2
                 JMP R7
                 
PRE_EXIT         LD  R0, flag
                 ADD R0, R0, #-1    ;
                 BRnp EXIT_2        ; if (flag -1) != 0, actually exiting
                 NOT R6, R6
                 ADD R6, R6, #1     ; if (flag -1) == 0, invert R6 before exit
EXIT_2           LD  R7, SAVE_2
                 JMP R7
              
ERROR            LEA R0, error
                 PUTS
                 LD  R0, var
                 BRz a_is
                 LEA R0, b_IS
                 PUTS
                 JSR INITIAL_LOOP

EXCEEDED         LEA R0, exceed
                 PUTS
                 LD  R0, var
                 BRz a_is
                 LEA R0, b_IS
                 PUTS
                 JSR INITIAL_LOOP 

a_is             LEA R0, a_IS
                 PUTS
                 JSR INITIAL_LOOP

a_IS   .STRINGZ "a: a ="
b_IS   .STRINGZ "b: b =" 
var         .BLKW x0001
tmp         .BLKW x0001
tmp2        .BLKW x0001  
tmp3        .BLKW x0001
flag        .BLKW x0001
four_dig    .FILL #3276
SAVE_1    .BLKW x0001
SAVE_2    .BLKW x0001
De_ASCII  .FILL #-48
TEN       .FILL #10
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000
error       .STRINGZ "\nInvalid input, please re-enter number to "  
exceed      .STRINGZ "\nInputed number is Out of Range, please re-enter number to "


OUTPUT        ST  R7, SAVE_1
              AND R0, R0, #0     ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag       ; flag = 1, not allow printing 0's until first non-zero digit

              ADD R6, R6, #0        ; R6 unchanged, this line is to apply the brnach condition
              BRzp MAIN_OUTPUT       ; if R6 >= 0, just continue printing the damn number
                
              NOT R6, R6
              ADD R6, R6, #1        ; When R6 < 0,  |R6| = -R6
              LD  R0, De_ASCII      ; R0 = -48
              ADD R0, R0, #3        ; R0 = -45
              NOT R0, R0
              ADD R0, R0, #1        ; R0 = 45 ('-' character)
              OUT                   ; print out hyphen to indicate negative number and then |R6|

MAIN_OUTPUT   LD  R5, VANJ       ; R5 = 10000
              JSR PRINT 
              LD  R5, THOUSAND   ; R5 = 1000
              JSR PRINT
              LD  R5, HUNDRED    ; R5 = 100
              JSR PRINT
              LD  R5, TEN        ; R5 = 10
              JSR PRINT          ; now, R6 should less than 10

              ADD R5, R6, #0     ; set R5 = R6, check if R6 == 0
              BRz LAST_ZERO
              AND R5, R5, #0     ; else print the last non-zero digit
              ADD R5, R5, #1     ; R5 = 1
              JSR PRINT
              LD  R7, SAVE_1     ; RETURN
              JMP R7                 
              
LAST_ZERO     LD  R0, De_ASCII   ; R0 = -48
              NOT R0, R0 
              ADD R0, R0, #1     ; R0 = 48 (zero)
              OUT
              LD R7, SAVE_1
              JMP R7        
              

PRINT         ST  R7, SAVE_2
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
              AND R0, R0, #0
PRINT_LOOP    ADD R0, R0, #1     ; Remainder count
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero

              LD  R5, flag       
              ADD R5, R5, #0     ; Because Branch condition only apply for ALU operations
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0
              ST  R5, flag       ; flag = 0, allow printing 0's
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5  
              OUT
              LD  R7, SAVE_2
              JMP R7


.END
