;Show the systematic decomposition of the process of dividing two integers (NEGATIVE and POSITIVE). 
; Requirements:
; - Program starting at locaiton x3000 
; - The program divides the number in memory location x4000 by the number in memory location x4001   ( addr(x4000) / addr(x4001)
; - Stores the QUOTIENT at x5000 and the REMAINDER at x5001

---------------------- Le Program -----------------
.ORIG x3000
                    LEA R0, msg1
                    PUTS
                    LDI R6, num1
                    JSR OUTPUT

                    LD  R0, TEN
                    OUT                ; newline character

                    LEA R0, msg2
                    PUTS
                    LDI R6, num2
                    JSR OUTPUT

                    LD  R0, TEN
                    OUT                ; newline
                    LEA R0, msg3       ; Informing the operation 
                    PUTS
                    JSR DIVISION       ; Execute operation

                    
                    LEA R0, msgQuo
                    PUTS
                    LDI R6, QUOTI      ; Print out Quotient
                    JSR OUTPUT
                    LD  R0, TEN
                    OUT                ; newline

                    LEA R0, msgRei
                    PUTS
                    LDI R6, REMAIN
                    JSR OUTPUT
                    HALT
   
                     


DIVISION    LDI  R1, num1       ; LOAD numbers from x4001 (pointed by num1) 
            LDI  R2, num2       ; LOAD x4001 (pointed by num2)
            NOT R2, R2
            ADD R2, R2, #1     ; 2's complement R2 = -R2

    LOOP    ST  R1, tmp        ; Temporary save the previous value of R1 before it becomes Negative
            ADD R3, R3, #1     ; R3 = number of substraction
            ADD R1, R1, R2     ; R1 = R1 - R2  
            BRzp LOOP          ; if R1 >= 0, continue substracting

            ADD R3, R3, #-1    ; Eliminate the quotient count of substraction that results in Negative
            STI R3, QUOTI      ; Store in x5000
            LD  R1, tmp        ; Load value of R1 before it results in Negative. This is the REMAINDER
            STI R1, REMAIN     ; Store in x5001    
            RET

tmp      .BLKW x0001
num1     .FILL x4000
num2     .FILL x4001 
QUOTI    .FILL x5000
REMAIN   .FILL x5001
msg1     .STRINGZ "Number stored in x4000: a = "
msg2     .STRINGZ "Number stored in x4001: b = "
msg3     .STRINGZ "Calculating a/b...\n"
msgQuo   .STRINGZ "The result Quotient: "
msgRei   .STRINGZ "The result Remainda: "
TEN      .FILL x000A        
De_ASCII .FILL #-48                      

---------------------------- OUTPUT SUBROUTINE -----------------
OUTPUT        ST  R7, SAVE
              AND R0, R0, #0     ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag       ; flag = 1, not allow printing 0's until first non-zero digit

              ADD R6, R6, #0        ; R6 unchanged, this line is to apply the brnach condition
              BRzp MAIN_OUTPUT       ; if R6 >= 0, just continue printing the damn number
                
              NOT R6, R6
              ADD R6, R6, #1        ; When R6 < 0,  |R6| = -R6
              LD  R0, De_ASCII      ; R0 = -48
              ADD R0, R0, #3        ; R0 = -45
              NOT R0, R0
              ADD R0, R0, #1        ; R0 = 45 ('-' character)
              OUT                   ; print out hyphen to indicate negative number and then |R6|

MAIN_OUTPUT   LD  R5, VANJ       ; R5 = 10000
              JSR PRINT 
              LD  R5, THOUSAND   ; R5 = 1000
              JSR PRINT
              LD  R5, HUNDRED    ; R5 = 100
              JSR PRINT
              LD  R5, TEN        ; R5 = 10
              JSR PRINT          ; now, R6 should less than 10

              ADD R5, R6, #0     ; set R5 = R6, check if R6 == 0
              BRz LAST_ZERO
              AND R5, R5, #0     ; else print the last non-zero digit
              ADD R5, R5, #1     ; R5 = 1
              JSR PRINT
              LD  R7, SAVE       ; RETURN
              JMP R7                 
              
LAST_ZERO     LD  R0, De_ASCII   ; R0 = -48
              NOT R0, R0 
              ADD R0, R0, #1     ; R0 = 48 (zero)
              OUT
              LD R7, SAVE
              JMP R7        
              

PRINT         ST  R7, SAVE_2
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
              AND R0, R0, #0
PRINT_LOOP    ADD R0, R0, #1     ; Remainder count
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero

              LD  R5, flag       
              ADD R5, R5, #0     ; Because Branch condition only apply for ALU operations
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0
              ST  R5, flag       ; flag = 0, allow printing 0's
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5  
              OUT
              LD  R7, SAVE_2
              JMP R7

tmp       .BLKW x0001
SAVE      .BLKW x0001
SAVE_2    .BLKW x0001
flag      .BLKW x0001
De_ASCII  .FILL #-48
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000

.END
