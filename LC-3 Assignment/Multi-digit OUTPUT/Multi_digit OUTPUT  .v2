; Modification: In version 1, when the outputed number has fewer digits, the ouput will print out non-existing digits as 0's, which is redundant. For example: 345 will be printed out as 00345. This version prevent printing out 0's until the first non-zero digit in print out.
; Algorithm: We create a boolean type flag (initially = 1) that check whether the first digit is 0, if true, flag == 1 and the system will not print out any 0's. Until a non-zero digit is encountered flag = 0.  

; Registers used: R0, R5, R6
; R6 stores the value that needed to print out and R5 stores the divisors

; ///// R6 = input num

OUTPUT        ST  R7, SAVE
              LD  R5, VANJ
              JSR PRINT
              OUT                   ; We dont put OUT (trap_vector) in PRINT subroutine because it will cause bug when call RET
              LD  R5, THOUSAND
              JSR PRINT
              OUT
              LD  R5, HUNDRED
              JSR PRINT
              OUT
              LD  R5, TEN
              JSR PRINT
              OUT
              ADD R0, R6, R5     ; R6 should < 10 at this point, and R5 still equal to -48
              OUT                ; PRINT OUT the last digit
              LD  R7, SAVE       ; RETURN
              JMP R7                 
              

PRINT         AND R0, R0, #0     ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag       ; flag = 1, not allow printing 0's until first non-zero digit
              AND R0, R0, #0
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
PRINT_LOOP    ADD R0, R0, #1     ; Remainder count
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero
              LD  R5, flag       
              ADD R5, R5, #0     ; Because Branch condition only apply for ALU operations
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0
              ST  R5, flag       ; flag = 0, allow printing 0's
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5     
              RET


tmp       .BLKW x0001
SAVE      .BLKW x0001
flag      .BLKW x0001
De_ASCII  .FILL #-48
TEN       .FILL #10
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000
