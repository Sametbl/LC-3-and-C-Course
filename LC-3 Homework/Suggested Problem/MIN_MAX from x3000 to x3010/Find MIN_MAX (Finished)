; Problem: Load number from x3001 to x3010 and find MIN, MAX.
; Program start at x3011
; THIS IS BAD SOLUTION:
; Normally you compare a number by subtration, but in comparsion involve negative number, this could cause problem in LC-3
; Subtraction a Positive num by Negative num, could resultin number that excced the limit if 16-bit number (32767 or 65535).
;The comparison could be false. 

; My approach this ISSUE is to separate Negative and Positive numbers to 2 groups (which I will call it "NEGA" and "PUSS") 
; Then find MIN, MAX is of each group, for negative number, calculate the absolute values and compare MIN, MAX like positive numbers.
;Invert MAX to MIN, and MIN to MAX, for NEGA group.

; MAX = MAX of "PUSS" group
; MIN = Min of "NEGA" group
; if Max of "PUSS" = NULL, MAX = Min of "NEGA"
; if Min of "NEGA" = NULL, MIN = Min of "PUSS"
; In case, there are only Negative or Positive number, we neeed 2 flag to determine:
; - flag_1 = True: have Negative numbers in the list             (assigned in NEGA group) 
; - flag_2 = True: have Positive numbers in the list             (assigned in PUSS group)


.ORIG x3011
               LD  R1, start_ID   ; Load starting address
               LD  R2, end_ID     ; Load ending address
               NOT R1, R1
               ADD R1, R1, #1     ; R1 = -R1
               ADD R2, R2, R1     ; R2 = end - start = x3010 - x3001 = #15 , for input countdown, There are actually 16 , 0 included
               ST  R2, length     ; R2 tells the length of array of number that we going to work with
               LD  R1, start_ID   ; restore R1 to x3001

               AND R4, R4, #0     
               ST  R4, DUONG       
               ST  R4, AM         
               ADD R4, R4, #-8    ; Init start R4 words jump-counter

NHAP           LEA R0, msg        ; 
               PUTS
               LEA R0, X_3001
               ADD R4, R4, #8     ; Increase jump-size
               ADD R0, R0, R4     ; ADD to R0 to output the right message
               STI R0, var
               PUTS
               JSR INPUT

               ADD R7, R6, #0
               BRzp INIT_PUSS
               NOT R7, R7         ; Initially assume Min, Max of negative number is any negative number in the list
               ADD R7, R7, #1
               ST  R7, Min_AM
               ST  R7, Max_AM
               BR  NHAP_CONTINUE
INIT_PUSS      ST  R7, Min_DUONG
               ST  R7, Max_DUONG
               BR  NHAP_CONTINUE
NHAP_CONTINUE  STR R6, R1, #0     ; Store inputed value to corresponding address 
               ADD R1, R1, #1     ; Increment R1 for inputing next address
               ADD R2, R2, #-1    ; Tracking when to stop inputing
               BRzp NHAP

               LD  R1, start_ID   ; R1 = x3001    ( = address, != value) 
               LD  R2, length 
 COMPARE       LDR R3, R1, #0
               BRn  NEGA
               BRzp PUSS
 NEXT          ADD R1, R1, #1
               ADD R2, R2, #-1    
               BRzp COMPARE       ; if count >= 0, countinue inputing

               LD  R4, Min_AM
               LD  R5, Max_AM
               NOT R4, R4
               ADD R4, R4, #1
               NOT R5, R5
               ADD R5, R5, #1
               ST  R4, Max_AM           ; invert the Max, Min of NEGA group and exchange Max to Min and vv
               ST  R5, Min_AM

               LD  R0, AM
               BRz ONLY_PUSS
               LD  R0, DUONG
               BRz ONLY_NEGA

               LD  R4, Min_AM
               ST  R4, MIN
               LD  R5, Max_DUONG
               ST  R5, MAX

PRINT_RESULT   LEA R0, msg_MIN
               PUTS 
               LD  R6, MIN
               JSR OUTPUT

               LEA R0, msg_MAX
               PUTS
               LD  R6, MAX
               JSR OUTPUT
               HALT




ONLY_PUSS      LD  R4, Min_DUONG
               ST  R4, MIN
               LD  R4, Max_DUONG
               ST  R4, MAX
               BR  PRINT_RESULT
ONLY_NEGA      LD  R4, Min_AM
               ST  R4, MIN
               LD  R4, Max_AM
               ST  R4, MAX
               BR  PRINT_RESULT

NEGA           LD  R0, AM
               ADD R0, R0, #1
               ST  R0, AM
               LD  R4, Min_AM
               LD  R5, Max_AM
               NOT R3, R3
               ADD R3, R3, #1
               JSR MIN_MAX
               ST  R4, Min_AM
               ST  R5, Max_AM
               JSR NEXT

PUSS           LD  R0, DUONG
               ADD R0, R0, #1
               ST  R0, DUONG
               LD  R4, Min_DUONG
               LD  R5, Max_DUONG
               JSR MIN_MAX
               ST  R4, Min_DUONG
               ST  R5, Max_DUONG
               JSR NEXT


; R3 = Number needed to be compare    ; R4 = Min,  R5 = MAX
MIN_MAX         ST  R7, SAVE
                JSR COMPARE_MIN     ; R3 is untouched in this SUB
                JSR COMPARE_MAX
                JSR EXIT
                
COMPARE_MIN     ST  R4, temp         ; Temporary save R4
                NOT R4, R4
                ADD R4, R4, #1
                ADD R4, R3, R4      ; R4 = R3 - R4 = R3 - Min
                BRn New_Min         ; If Min > R3, R3 = new Min
                LD  R4, temp         ; If Min <= R3, EXIT keep Min as it was
                RET
New_Min         ADD R4, R3, #0      ; R4 = Min = R3
                RET
COMPARE_MAX     ST  R3, temp
                NOT R3, R3
                ADD R3, R3, #1
                ADD R3, R5, R3      ; R3 = R5 - R3 = Max - R3
                BRn New_Max         ; If R3 > Max, R3 = new Max
                RET                 ; If R3 <= Max, EXIT keep Max as it was
New_Max         LD  R3, temp
                ADD R5, R3, #0      ; R5 = Max = R3
                RET

EXIT            LD  R7, SAVE
                JMP R7               


start_ID       .FILL x3001       
end_ID         .FILL x3005        ; you can adjust the amount of numbers that we are working with
var        .FILL x4000
To_ASCII   .FILL #48
SAVE       .BLKW x0001
Max_AM     .BLKW x0001
Max_DUONG  .BLKW x0001
Min_AM     .BLKW x0001
Min_DUONG  .BLKW x0001
MAX        .BLKW x0001
MIN        .BLKW x0001
DUONG      .BLKW x0001
AM         .BLKW x0001
temp       .BLKW x0001
length     .BLKW x0001


;-------------------- Message ---------------------------
msg        .STRINGZ "Enter a signed number (-32768 to 32767) to "
msg_MIN    .STRINGZ "\nMIN integers is: "
msg_MAX    .STRINGZ "\nMAX integers is: "
 X_3001       .STRINGZ  "x3001: "      ; each message is 8 words long 
 X_3002       .STRINGZ  "x3002: "      ; meaning if you load next X_30.. messgae is will start +8 from the previous message
 X_3003       .STRINGZ  "x3003: "      ; Which I will call "jump-size"
 X_3004       .STRINGZ  "x3004: "
 X_3005       .STRINGZ  "x3005: "
 X_3006       .STRINGZ  "x3006: "
 X_3007       .STRINGZ  "x3007: "
 X_3008       .STRINGZ  "x3008: "
 X_3009       .STRINGZ  "x3009: "
 X_300A       .STRINGZ  "x300A: "
 X_300B       .STRINGZ  "x300B: "
 X_300C       .STRINGZ  "x300C: "
 x_300D       .STRINGZ  "x300D: "
 X_300E       .STRINGZ  "x300E: "
 X_300F       .STRINGZ  "x300F: "
 X_3010       .STRINGZ  "x3010: " 




































; ----------------------------------- INPUT Subroutine --------------------------------------
;                               ( NOT AFFECTING TO MAIN CODE )


INPUT            ST  R7, SAVE_2     ; Store return address
INITIAL_LOOP     AND R6, R6, #0     ; make sure R6 = 0
                 AND R0, R0, #0    
                 ST  R0, flag       ; flag = 0: the input expected to be unsigned
                 GETC
                 OUT
                 ST  R0, tmp        ; If R0 is a digit, save it and check it later
                 ADD R0, R0, #-15   ; Because ADD instruction immediate field is between -16 and 15
                 ADD R0, R0, #-15
                 ADD R0, R0, #-15   ; Overall : R0 = R0 - 45  (check for '-' character)
                 BRz IS_SIGNED
                 JSR INITAL_JUMP    ; if not '-' character, continue inputing, but firstly, check whether the current character a number or non-number.

IS_SIGNED        AND R0, R0, #0
                 ADD R0, R0, #1
                 ST  R0, flag       ; flag = 1: the current inputing number is signed
                 JSR MAIN_LOOP

MAIN_LOOP        GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 ADD R0, R0, #-10   ; Check for newline character (ASCII 10)
                 BRz PRE_EXIT       ; If true, stop inputing and exit
INITAL_JUMP      JSR CHECK          ; JUMP TO CHECK subroutine to check for non-numberic chars
                 JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; After CHECK, tmp already store the De_ASCIIed number
                 ADD R6, R6, R0     ; After each INPUT loop: R6 = (R6 x10) +  R0
; This part examine cases to check for Out of Range                 
                 ADD R7, R6, #0     ; R7 = R6  (we don't need R7 to return anywhere)
                 NOT R7, R7
                 ADD R7, R7, #1
                 LD  R0, four_dig   ; R0 = 3276  
                 ADD R7, R0, R7     ; R7 = 3276 - R6     (R6 = R7)
                 BRz LAST_DIGIT
                 BRp MAIN_LOOP      ; if R6 < 3276, fith digit with no restriction
WAIT_ENTER       GETC               ; else check for "enter"
                 OUT                
                 ST  R0, tmp        
                 ADD R0, R0, #-10 
                 BRz PRE_EXIT
                 JSR CHECK          ; any other character include number input is ERROR, or EXCEED if its a number
                 JSR EXCEEDED       

LAST_DIGIT       GETC      
                 OUT
                 ST  R0, tmp        
                 ADD R0, R0, #-10  
                 BRz PRE_EXIT       
                 JSR CHECK
                 LD  R7, flag
                 ADD R7, R7, #-1    ; check for current number is signed
                 BRz EXCEED_SIGNED  ; if true last digit limit is 8
                 LD  R7, tmp        ;             
                 ADD R7, R7, #-7    ; else last digit limit is 7
                 BRp EXCEEDED       ; "EXCEED" error message and prompt user
                 JSR ACCEPT         ; else accepts last digit

EXCEED_SIGNED    LD  R7, tmp        ; R7 last digit (already De_ASCII)
                 ADD R7, R7, #-8
                 BRp EXCEEDED            
ACCEPT           JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; Load number
                 ADD R6, R6, R0     
                 JSR WAIT_ENTER     ; WAIT for enter, or check for any other input (surely will lead to EXCEEDED or ERROR

X10_R6           ADD R0, R6, #0     ; R0 = R6 = a = tmp2 ,   a is initial value of R6
                 ST  R0, tmp2
                 AND R6, R6, #0     ; R6 = 0   
                 LD  R0, TEN        ; R0 = 10
X_LOOP           ST  R0, tmp3       
                 LD  R0, tmp2       ; tmp2 = a
                 ADD R6, R6, R0     ; R6 = R6 + a
                 LD  R0, tmp3       ; tmp3 initally = 10 
                 ADD R0, R0, #-1    ; tmp3--    
                 BRp X_LOOP         ; While R4 > 0, keeping adding 'a' to R6
                 RET                ; else Return
                 
; CHECK Subroutine note: tmp initally store inputed character, tmp2 store return address
CHECK            ST  R7, tmp2
                 LD  R7, tmp        ; 
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 ST  R0, tmp        ; For convenient, store the De_ASCIIed number
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 9
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
                 LD  R7, tmp2
                 JMP R7
                 
PRE_EXIT         LD  R0, flag
                 ADD R0, R0, #-1    ;
                 BRnp EXIT_2        ; if (flag -1) != 0, actually exiting
                 NOT R6, R6
                 ADD R6, R6, #1     ; if (flag -1) == 0, invert R6 before exit
EXIT_2           LD  R7, SAVE_2
                 JMP R7
              
ERROR            LEA R0, error
                 PUTS
                 LDI R0, var_2
                 PUTS
                 JSR INITIAL_LOOP

EXCEEDED         LEA R0, exceed
                 PUTS
                 LDI R0, var_2
                 PUTS
                 PUTS
                 JSR INITIAL_LOOP 
         
var_2       .FILL x4000       
flag        .BLKW x0001
tmp         .BLKW x0001
tmp2        .BLKW x0001  
tmp3        .BLKW x0001
SAVE_2      .BLKW x0001
TEN         .FILL x000A
four_dig    .FILL #3276
De_ASCII    .FILL #-48
error       .STRINGZ "\nInvalid input, please re-enter number to "  
exceed      .STRINGZ "\nInputed number is Out of Range, please re-enter number to "



OUTPUT        ST  R7, SAVE_1
              AND R0, R0, #0         ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag           ; flag = 1, not allow printing 0's until first non-zero digit
              ADD R6, R6, #0         ; R6 unchanged, this line is to apply the brnach condition
              BRzp MAIN_OUTPUT       ; if R6 >= 0, just continue printing the damn number
                
              NOT R6, R6
              ADD R6, R6, #1        ; When R6 < 0,  |R6| = -R6
              LD  R0, De_ASCII      ; R0 = -48
              ADD R0, R0, #3        ; R0 = -45
              NOT R0, R0
              ADD R0, R0, #1        ; R0 = 45 ('-' character)
              OUT                   ; print out hyphen to indicate negative number and then |R6|

MAIN_OUTPUT   LD  R5, VANJ       ; R5 = 10000
              JSR PRINT 
              LD  R5, THOUSAND   ; R5 = 1000
              JSR PRINT
              LD  R5, HUNDRED    ; R5 = 100
              JSR PRINT
              LD  R5, TEN        ; R5 = 10
              JSR PRINT          ; now, R6 should less than 10

              ADD R5, R6, #0     ; set R5 = R6, check if R6 == 0
              BRz LAST_ZERO
              AND R5, R5, #0     ; else print the last non-zero digit
              ADD R5, R5, #1     ; R5 = 1
              JSR PRINT
              LD  R7, SAVE_1     ; RETURN
              JMP R7                 
              
LAST_ZERO     LD  R0, De_ASCII   ; R0 = -48
              NOT R0, R0 
              ADD R0, R0, #1     ; R0 = 48 (zero)
              OUT
              LD R7, SAVE_1
              JMP R7        
              

PRINT         ST  R7, SAVE_2
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
              AND R0, R0, #0
PRINT_LOOP    ADD R0, R0, #1     ; Remainder count
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero
              LD  R5, flag       
              ADD R5, R5, #0     ; Because Branch condition only apply for ALU operations
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0
              ST  R5, flag       ; flag = 0, allow printing 0's
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5  
              OUT
              LD  R7, SAVE_2
              JMP R7


SAVE_1    .BLKW x0001
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000
.END
