>>>>>>>>>>>>>>>>>>>   Group 3's Assignment attemp by Idiot <<<<<<<<<<<<<<<<<<<<<<<
11/02/2024: " This Assignment has made me sucked my own d*ck during Tet. I nutted because it was so Hard."

====================== The Problem ================
"The LC-3 has no Divide instruction. A programmer needing to divide two numbers would have to write a routine to handle it.
Show the systematic decomposition of the process of dividing two integers (NEGATIVE and POSITIVE). 
Write an LC-3 machine language program starting at locaiton x3000 that divides the number in memory location x4000 by the number in memory location x4001 and stores the quotient at x5000 and the remainder at x5001"

===================== My approach to the problem ====================

                                        1. ALGORITHM FOR DIVISION IN LC-3
--------- SOLUTION A ----------
- Imagine Division is a loop of substraction and the number of times loop repeated before the subtration result in Negative is the Quotient, the remaining number after the last loop (smaller than divisor) is the Remainder.
     "This is not a real definition, I made up this Shit . But atleast it works so don't touch it"

- ISSUE with this solution: 
When perfoms divsion with 0, the output is 0 for 0/0, and non-zero number /0 will stucked in infinite loop, which is FUCKING BULLSHIT. 
"This can easily fixed by additional code. But this proved that this decomposition of division is NOT entirely CORRECT and my brain is full of shit"

=> Expecting a solution B 
--------- SOLUTION B ----------
... "No idea, my brain is fricking fried"



                    2. FOR DIVISION THAT INVOLVE NEGATIVE NUMBERS, THERE ARE 2 CONVENTION:
a) Convention 1: Remainder is Positive          
 Remainder = Remainder of (|Numerator| / |Denominator|)
                  Ex:  27 divide by -6   =>     27 = -6 * -4  +3
                  Ex: -27 divide by  6   =>    -27 =  6 * -5  +3
                  Ex: -27 divide by -6   =>    -27 = -6 *  5  +3
                  Ex:   6 divide by 27   =>      6 = 27 *  0 + 6
                  Ex:   6 divide by -27  =>      6 = -27*  0 + 6
                  Ex:  -6 divide by -27  =>     -6 = -27*  0 - 6
 => Numerator &  Denominator > 0        => Quotient & Remainder > 0     ,  Quotient  =   Quotient
 => Numerator OR Denominator < 0        => Quotient < 0,   Remainder > 0,  Quotient  = -[Quotient +1]
 => Numerator &  Denominator < 0        => Quotient > 0,   Remainder < 0,  Quotient  =   Quotient
 => Numberator < Denominator            => Quotient = 0, Remainder = Numberator
===> "Calculating Quotient will complicated as FUCK. Imagine the amount of if-esle statement required for this shitty ass Convention"

b) Convention 2: Remainder is Negative
                  Ex:  27 divide by -6   =>     27 = -6 * -4  -3
                  Ex: -27 divide by  6   =>    -27 =  6 * -4  -3
                  Ex: -27 divide by -6   =>    -24 = -6 *  4  -3
                  Ex:   6 divide by 27   =>      6 = 27 *  0 + 6
                  Ex:   6 divide by -27  =>      6 = -27*  0 + 6
                  Ex:  -6 divide by -27  =>     -6 = -27*  0 - 6
 => Numerator &  Denominator > 0        => Quotient & Remainder > 0 
 => Numerator OR Denominator < 0        => Quotient & Remainder < 0
 => Numerator &  Denominator < 0        => Quotient > 0,   Remainder < 0
 => Numberator < Denominator            => Quotient = 0, Remainder = Numberator
=====> The Quotient in this method only 1 simple number in any cases, only the signed is afternated.
=====>         Quotient  = -Quotient           if one of the Numerator OR Denominator < 0 
               Remainder = -Remainder          if either Numerator OR Denominator < 0
=====> "Imma chose this one"

- Note that the result of Quotient must match the "sign rule".
- The "sign rule" : Same signs - the answer is Positive   ;    Different signs - the answer is Negative
===> "Assessing the theory above, this is always true anyway, no need to concern about this in the code."



                                                  3. SIZE OF INTEGER
- Registers in LC-3 have size of 16-bit, the maxinum signed number LC-3 can represents is -(2^15 - 1) to 2^15 ,OR, âˆ’32,768 to 32,767, so registers in LC-3 only capable of performing arithmetic operations in this range.
- If the number is unsigned the range will be 0 to 65535.
      



===================================== OPTIONAL, NOT REQUIRED IN THE PROBLEM ====================================
   "FUCK THIS. My DEADASS brain has spent more time in this "UNNECESSARY" tasks than the Actual fucking Problem."
   "I losing weight due to lost of Braincells during Tet"

4. Inputing multiple-digit number
- Inputing process is done by looped subroutine that breaks when the inputed character is newline character (ASCII-10) or non-integer character.
- The loop: We store the first inputed integer in a register (intially 0), if another integer inputed to the console, we multiply the current value of that register by 10 and add the latest intputed integer.
Example: 3     = 0 x10 +3    
         35    = 3 x10 + 5     
         352   = (3 x10 + 5) x10 + 2    
         3528  = [(3 x10 +5) x10 + 2] x10 + 8  
         35289 = { [(3 x10 +5) x10 + 2] x10 + 8 } x10 + 9
- If '-' character is inputed first, we create a flag with temporary variable to indicated the inputing the number is negative, which give us data to apply the "sign rule", we then do a 2's complement inversion of the number later on when the ansnwer is Negative.
- While inputing, inputed non-integer characters will output an error message, prompting user to restart the program.

5. Outputing multiple-digit number (answer)
- Outputing is done by a subroutine that output each digit of the number from left to right
- The largest possible digit in LC-3 is tens of thousands, each digit of number is print out by outputing the Quotient result from the divsion of that number by 10000, 1000, 100, 10 consecutively, the next division is perfomed using the Remainder of previous division.
- If the flag indicating signed number is true, first print out '-' character
Exmaple: 35289 : 10000 = 3 , remains 5289                // Print out : '3'
         5289  : 1000  = 5 , remains 289                 // Print out : '5'
         289   : 100   = 2 , remains 89                  // Print out : '2'
         89    : 10    = 8 , remains 9                   // Print out ; '8'    then Print out : '9'
 ==>     On console: 35289

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
                             MAIN CODE versions features note 
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
=================== Code_MAIN_Lite ====================
- There is no input, assume the numbers already exist in x4000 and x4001
- Number range: >> Not yet tested <<
- Display the current values of x4000 and x4001
- Calculate and print out result (Quotient and Remainder)

=================== Code_MAIN_PRO =====================
- Give user instruction and Prompt user to inputs numbers to x4000 and x4001
- Number range: -32768 to 32767
- Check for non-numberic character input, if detected, inform user and end program
- Print out numbers inputed in x4000 and x4001 for Verification
- Calculate and print out result (Quotient and Remainder)
- Explain the result

=================== Code_MAIN_FINAL =====================
- Give user instruction and Prompt user to inputs numbers to x4000 and x4001
- Number range: -32768 to 32767
- Check for non-numberic character.
- Check if inputed number if Out of Range
- Invalid input will not end the program, but instead ask user to re-enter input
- Print out numbers inputed in x4000 and x4001 for Verification
- Calculate and print out result (Quotient and Remainder)
- Explain the result


