;Show the systematic decomposition of the process of dividing two integers (NEGATIVE and POSITIVE). 
; Requirements:
; - Program starting at locaiton x3000 
; - The program divides the number in memory location x4000 by the number in memory location x4001   ( addr(x4000) / addr(x4001)
; - Stores the QUOTIENT at x5000 and the REMAINDER at x5001

; Version update: for testing purpose, this version ask user to input numbers to x4000 and 4001. 
; ---------------------- Le Program -----------------
.ORIG x3000
                    LEA R0, plz1          ; input x4000
                    PUTS
                    JSR INPUT
                    STI R6, num1
                    LEA R0, plz2          ; input x4001
                    PUTS
                    JSR INPUT
                    STI R6, num2

                    LEA R0, space
                    PUTS                  ; newline 3 times

                    LEA R0, msg1          ; Output x4000 (for testing)
                    PUTS
                    LDI R6, num1
                    JSR OUTPUT
                    LD  R0, TEN           ; newline character
                    OUT               

                    LEA R0, msg2          ; Output x4001
                    PUTS
                    LDI R6, num2
                    JSR OUTPUT

                    LEA R0, msg3       ; Informing the operation 
                    PUTS
                    JSR DIVISION       ; Execute operation

                    
                    LEA R0, msgQuo
                    PUTS
                    LDI R6, QUOTI      ; Print out Quotient
                    JSR OUTPUT
                    LD  R0, TEN
                    OUT                ; newline

                    LEA R0, msgRei
                    PUTS
                    LDI R6, REMAIN
                    JSR OUTPUT
                    LEA R0, space      ; space 3 times
                    HALT
   
                     


DIVISION    LDI  R1, num1       ; LOAD numbers from x4001 (pointed by num1) 
            LDI  R2, num2       ; LOAD x4001 (pointed by num2)
            NOT R2, R2
            ADD R2, R2, #1     ; 2's complement R2 = -R2

    LOOP    ST  R1, tmp        ; Temporary save the previous value of R1 before it becomes Negative
            ADD R3, R3, #1     ; R3 = number of substraction
            ADD R1, R1, R2     ; R1 = R1 - R2  
            BRzp LOOP          ; if R1 >= 0, continue substracting

            ADD R3, R3, #-1    ; Eliminate the quotient count of substraction that results in Negative
            STI R3, QUOTI      ; Store in x5000
            LD  R1, tmp        ; Load value of R1 before it results in Negative. This is the REMAINDER
            STI R1, REMAIN     ; Store in x5001    
            RET


plz1     .STRINGZ "Plz input an integer to x4000: a = "
plz2     .STRINGZ "Plz input an integer to x4001: b = "
space    .STRINGZ "\n\n\n" 
msg1     .STRINGZ "Number stored in x4000: a = "
msg2     .STRINGZ "Number stored in x4001: b = "
msg3     .STRINGZ "Calculating a/b...\n"
msgQuo   .STRINGZ "The result Quotient: "
msgRei   .STRINGZ "The result Remainda: "
num1     .FILL x4000
num2     .FILL x4001 
QUOTI    .FILL x5000
REMAIN   .FILL x5001
TEN      .FILL x000A        
De_ASCII .FILL #-48          
tmp      .BLKW x0001

; -------------- INPUT SUBROUTINE ----------------------
INPUT            ST  R7, SAVE       ; Store return address
                 AND R6, R6, #0     ; make sure R6 = 0
INTIAL_LOOP      AND R0, R0, #0    
                 ST  R0, flag       ; flag = 0: the input expected to be unsigned
                 GETC
                 OUT
                 ST  R0, tmp        ; If R0 is a digit, save it and check it later
                 ADD R0, R0, #-15   ; Because ADD instruction immediate field is between -16 and 15
                 ADD R0, R0, #-15
                 ADD R0, R0, #-15   ; Overall : R0 = R0 - 45  (check for '-' character)
                 BRz IS_SIGNED
                 JSR CHECK          ; if not '-' character, continue inputing, but firstly, check whether the current character a number or non-number.

                 JSR MAIN_LOOP

IS_SIGNED        AND R0, R0, #0
                 ADD R0, R0, #1
                 ST  R0, flag       ; flag = 1: the current inputing number is signed
                 JSR MAIN_LOOP

MAIN_LOOP        GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 ADD R0, R0, #-10   ; Check for newline character (ASCII 10)
                 BRz EXIT           ; If true, stop inputing and exit

CHECK            LD  R7, tmp        ; R7 = inputed character
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 10
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
    
                 JSR X10_R6         ; R6 = R6 x10

                 LD  R0, tmp        ; Load temporary saved input number(ASCII) to R0
                 ST  R6, tmp        ; Temporary save R6
                 LD  R6, De_ASCII   ; R6 = -48 
                 ADD R0, R0, R6     ; R0 = lastest digit  
                 LD  R6, tmp        ; Return R6
                 ADD R6, R6, R0     ; After each INPUT loop: R6 = (R6 x10) +  R0
                 JSR MAIN_LOOP      ; do INPUT loop

X10_R6           ADD R0, R6, #0     ; R0 = R6 = a = tmp2 ,   a is initial value of R6
                 ST  R0, tmp2
                 AND R6, R6, #0     ; R6 = 0   
                 LD  R0, TEN        ; R0 = 10
; ------------------- Multiplication loop --------------------
X_LOOP           ST  R0, tmp3
                 LD  R0, tmp2       ; tmp2 = a
                 ADD R6, R6, R0     ; R6 = R6 + a
                 LD  R0, tmp3       ; tmp3 initally = 10 
                 ADD R0, R0, #-1    ; tmp3--    
                 BRp X_LOOP         ; While R4 > 0, keeping adding 'a' to R6
                 RET                ; else Return
            
EXIT             LD  R0, flag
                 ADD R0, R0, #-1    ;
                 BRnp EXIT_REAL     ; if (flag -1) != 0, actually exiting
                 NOT R6, R6
                 ADD R6, R6, #1     ; if (flag -1) == 0, invert R6 before exit
EXIT_REAL        LD  R7, SAVE
                 JMP R7
              
ERROR            LD R0, TEN
                 OUT
                 LEA R0, error
                 PUTS
                 HALT
              
error       .STRINGZ "Invalid input, program ended."       
flag        .BLKW x0001
tmp2        .BLKW x0001  
tmp3        .BLKW x0001
SAVE        .BLKW x0001


;------------------- OUTPUT SUBROUTINE -----------------
OUTPUT        ST  R7, SAVE
              AND R0, R0, #0     ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag       ; flag = 1, not allow printing 0's until first non-zero digit

              ADD R6, R6, #0        ; R6 unchanged, this line is to apply the brnach condition
              BRp MAIN_OUTPUT       ; if R6 > 0, just continue printing the damn number
                
              NOT R6, R6
              ADD R6, R6, #1        ; When R6 < 0,  |R6| = -R6
              LD  R0, De_ASCII      ; R0 = -48
              ADD R0, R0, #3        ; R0 = -45
              NOT R0, R0
              ADD R0, R0, #1        ; R0 = 45 ('-' character)
              OUT                   ; print out hyphen to indicate negative number and then |R6|

MAIN_OUTPUT   LD  R5, VANJ       ; R5 = 10000
              JSR PRINT 
              LD  R5, THOUSAND   ; R5 = 1000
              JSR PRINT
              LD  R5, HUNDRED    ; R5 = 100
              JSR PRINT
              LD  R5, TEN        ; R5 = 10
              JSR PRINT
              AND R5, R5, #0
              ADD R5, R5, #1     ; R5 = 1
              JSR PRINT
              LD  R7, SAVE       ; RETURN
              JMP R7                 
              

PRINT         ST  R7, SAVE_2
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
              AND R0, R0, #0
PRINT_LOOP    ADD R0, R0, #1     ; Remainder count
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero

              LD  R5, flag       
              ADD R5, R5, #0     ; Because Branch condition only apply for ALU operations
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0
              ST  R5, flag       ; flag = 0, allow printing 0's
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5  
              OUT
              LD  R7, SAVE_2
              JMP R7


SAVE_2    .BLKW x0001
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000

.END
