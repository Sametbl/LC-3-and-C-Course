.ORIG x3000
 input_len     .STRINGZ "Enter the length of the list of numbers (starting at x4000): Length = "
               LEA R0, input_len
               JSR INPUT
               LD  R6, end_ID
            
               LD  R1, start_ID   ; Load starting address
               LD  R2, end_ID     ; Load ending address
               NOT R1, R1
               ADD R1, R1, #1     ; R1 = -R1
               ADD R2, R2, R1     ; R2 = end - start = x3010 - x3001 = #15 , for input countdown, There are actually 16 , 0 included
               ST  R2, length     ; R2 tells the length of array of number that we going to work with
               LD  R1, start_ID   ; restore R1 to x3001
               AND R4, R4, #0     
               ST  R4, Num_of_Neg       ; Conviently, init Num_of_Neg and Num_of_Pos while we have R4 = 0
               ST  R4, Num_of_Pos
               ST  R4, var
                 
NHAP           LEA R0, msg        ; 
               PUTS
               LEA R0, X_3001
               LD R4, var     ; Increase jump-size
               ADD R0, R0, R4     ; ADD to R0 to output the right message
               STI R0, var
               PUTS
               JSR INPUT
               STR R6, R1, #0     ; Store inputed value to corresponding address  
               ADD R1, R1, #1     ; Increment R1 for inputing next address
               ADD R2, R2, #-1    ; Tracking when to stop inputing
               BRzp NHAP

               LD  R1, start_ID   ; Load value of x3001 (start)
               LD  R2, length 


 COMPARE       LDR R3, R1, #0
               BRn  Count_Neg
               BRzp Count_Pos
 NEXT          ADD R1, R1, #1
               ADD R2, R2, #-1    
               BRzp COMPARE       ; if count >= 0, countinue inputing

               LD  R2, To_ASCII   ; R2 = 48
               LEA R0, Neg_count 
               PUTS
               LD  R0, Num_of_Neg
               ADD R0, R0, R2
               OUT

               LEA R0, Pos_count
               PUTS
               LD  R0, Num_of_Pos
               ADD R0, R0, R2
               OUT
               HALT
               

Count_Neg      LD  R5, Num_of_Neg    ; Load current Nega Count
               ADD R5, R5, #1
               ST  R5, Num_of_Neg    ; Store Neg count + 1
               JSR NEXT              ; Return to COMPARE for next number

Count_Pos      LD  R5, Num_of_Pos    ; Load current Pos count
               ADD R5, R5, #1
               ST  R5, Num_of_Pos    ; Store Pos count + 1
               JSR NEXT              ; Return to COMPARE for next number

start_ID       .FILL x4000       
end_ID         .BLKW x0001        ; you can adjust the amount of numbers that we are working with
var        .FILL x5000
To_ASCII   .FILL #48
Num_of_Neg .BLKW x0001
Num_of_Pos .BLKW x0001
length     .BLKW x0001
msg        .STRINGZ "\nEnter a signed number (-32768 to 32767) to number No."
Neg_count  .STRINGZ "\nNumber of negative integers stored: "
Pos_count  .STRINGZ "\nNumber of positive integers stored: "



INPUT            ST  R7, SAVE       ; Store return address
INITIAL_LOOP     AND R6, R6, #0     ; make sure R6 = 0
                 AND R0, R0, #0    
                 ST  R0, flag       ; flag = 0: the input expected to be unsigned
                 GETC
                 OUT
                 ST  R0, tmp        ; If R0 is a digit, save it and check it later
                 ADD R0, R0, #-15   ; Because ADD instruction immediate field is between -16 and 15
                 ADD R0, R0, #-15
                 ADD R0, R0, #-15   ; Overall : R0 = R0 - 45  (check for '-' character)
                 BRz IS_SIGNED
                 JSR INITAL_JUMP    ; if not '-' character, continue inputing, but firstly, check whether the current character a number or non-number.

IS_SIGNED        AND R0, R0, #0
                 ADD R0, R0, #1
                 ST  R0, flag       ; flag = 1: the current inputing number is signed
                 JSR MAIN_LOOP

MAIN_LOOP        GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 ADD R0, R0, #-10   ; Check for newline character (ASCII 10)
                 BRz PRE_EXIT       ; If true, stop inputing and exit
INITAL_JUMP      JSR CHECK          ; JUMP TO CHECK subroutine to check for non-numberic chars
                 JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; After CHECK, tmp already store the De_ASCIIed number
                 ADD R6, R6, R0     ; After each INPUT loop: R6 = (R6 x10) +  R0
; This part examine cases to check for Out of Range                 
                 ADD R7, R6, #0     ; R7 = R6  (we don't need R7 to return anywhere)
                 NOT R7, R7
                 ADD R7, R7, #1
                 LD  R0, four_dig   ; R0 = 3276  
                 ADD R7, R0, R7     ; R7 = 3276 - R6     (R6 = R7)
                 BRz LAST_DIGIT
                 BRp MAIN_LOOP      ; if R6 < 3276, fith digit with no restriction
WAIT_ENTER       GETC               ; else check for "enter"
                 OUT                
                 ST  R0, tmp        
                 ADD R0, R0, #-10 
                 BRz PRE_EXIT
                 JSR CHECK          ; any other character include number input is ERROR, or EXCEED if its a number
                 JSR EXCEEDED       

LAST_DIGIT       GETC      
                 OUT
                 ST  R0, tmp        
                 ADD R0, R0, #-10  
                 BRz PRE_EXIT       
                 JSR CHECK
                 LD  R7, flag
                 ADD R7, R7, #-1    ; check for current number is signed
                 BRz EXCEED_SIGNED  ; if true last digit limit is 8
                 LD  R7, tmp        ;             
                 ADD R7, R7, #-7    ; else last digit limit is 7
                 BRp EXCEEDED       ; "EXCEED" error message and prompt user
                 JSR ACCEPT         ; else accepts last digit

EXCEED_SIGNED    LD  R7, tmp        ; R7 last digit (already De_ASCII)
                 ADD R7, R7, #-8
                 BRp EXCEEDED            
ACCEPT           JSR X10_R6         ; R6 = R6 x10              
                 LD  R0, tmp        ; Load number
                 ADD R6, R6, R0     
                 JSR WAIT_ENTER     ; WAIT for enter, or check for any other input (surely will lead to EXCEEDED or ERROR

X10_R6           ADD R0, R6, #0     ; R0 = R6 = a = tmp2 ,   a is initial value of R6
                 ST  R0, tmp2
                 AND R6, R6, #0     ; R6 = 0   
                 LD  R0, TEN        ; R0 = 10
X_LOOP           ST  R0, tmp3       
                 LD  R0, tmp2       ; tmp2 = a
                 ADD R6, R6, R0     ; R6 = R6 + a
                 LD  R0, tmp3       ; tmp3 initally = 10 
                 ADD R0, R0, #-1    ; tmp3--    
                 BRp X_LOOP         ; While R4 > 0, keeping adding 'a' to R6
                 RET                ; else Return
                 
; CHECK Subroutine note: tmp initally store inputed character, tmp2 store return address
CHECK            ST  R7, tmp2
                 LD  R7, tmp        ; 
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 ST  R0, tmp        ; For convenient, store the De_ASCIIed number
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 9
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
                 LD  R7, tmp2
                 JMP R7
                 
PRE_EXIT         LD  R0, flag
                 ADD R0, R0, #-1    ;
                 BRnp EXIT          ; if (flag -1) != 0, actually exiting
                 NOT R6, R6
                 ADD R6, R6, #1     ; if (flag -1) == 0, invert R6 before exit
EXIT             LD  R7, SAVE
                 JMP R7
              
ERROR            LEA R0, error
                 PUTS
                 LDI R0, var_2
                 PUTS
                 JSR INITIAL_LOOP

EXCEEDED         LEA R0, exceed
                 PUTS
                 LDI R0, var_2
                 PUTS
                 PUTS
                 JSR INITIAL_LOOP 
         
var_2       .FILL x4000       
flag        .BLKW x0001
tmp         .BLKW x0001
tmp2        .BLKW x0001  
tmp3        .BLKW x0001
SAVE        .BLKW x0001
TEN         .FILL x000A
four_dig    .FILL #3276
De_ASCII    .FILL #-48
error       .STRINGZ "\nInvalid input, please re-enter number to "  
exceed      .STRINGZ "\nInputed number is Out of Range, please re-enter number to "
.END
