; Name: LUONG THANH VY (2151280), finished in 22/01/2024

; Task: Input 3 numbers to R0, R1 and R2. Find the Max and Min numbers then store them into R3, R4

; The Algorithm:
; - Assume the first int is MAX, then compare this max value to other integers. If larger, the MAX value equal the larger integer. Similarly, we're comparing for smaller value to find MIN
; - I use GETC + OUT instead of IN to remove the <Input a character> message.
; - For multiple-digit input, if more integer(digit) inputed to console, then multiply the previous integer by 10 and add the latest input integer and store it. If the next character is newline (ASCII = 10) then EXIT inputing. If the the input is not integer (ASCII < 48,  ASCII > 57) then invalid messgage will pop up, prompting the user to restart the program.
; - The lengthy code exceed the offset9 to use declared variables, so I declared the variables in the middle of the code, to prevent this.
; - For printing output, since the largest number in LC3 is 65535 or 32767 (if sign bit included), I devided desired numbers by 10000, 1000, 100, 10 and printing out the quotient subsequentally, the remainder of the division is used for the next division


.ORIG x3000
msg     .STRINGZ "Please enter unsigned integer (0 to 32767).\n"
msg1    .STRINGZ "Enter the first integer:  X = "
msg2    .STRINGZ "Enter the second integer: Y = "
msg3    .STRINGZ "Enter the third integer:  Z = "
              AND R0, R0, #0
              ST  R0, var       ; initially var = 0, ignore this , its for aesthetic purpose only

              LEA R0, msg       ; print out user instruction message 
              PUTS
              LEA R0, msg1      ; Prompting for input
              PUTS
              JSR INPUT         ; Return multiple-digits input (R6)
              ST  R6, X         ; Save X
     
              LEA R0, msg2       
              PUTS
              JSR INPUT
              ST  R6, Y         ; Store Y

              LEA R0, msg3        
              PUTS
              JSR INPUT
              ST  R6, Z         ; Store Z

              LD R0, X
              LD R1, Y
              LD R2, Z          ; Load X,Y,Z to indicated Registers
              JSR MAX_MIN
MAIN          LD  R3, Max       ; Labeled MAIN for returning
              LD  R4, Min

              LEA R0, msg_MAX   ; "The MAX is..."
              PUTS
              ADD R6, R3, #0
              JSR OUTPUT         ; Printing each digits
              AND R0, R0, #0
              ADD R0, R0, #10   ; Newline
              OUT

              LEA R0, msg_MIN   ; "The MIN is..."
              PUTS 
              ADD R6, R4, #0
              JSR OUTPUT
              LD  R0, tmp       ; Restore R0 to X as indicated
              HALT

;------------------------ find MAX_MIN Subroutine --------------------------------
MAX_MIN       ADD R5, R0, #0      ; Load X to R5
              ST  R5, Max         ; Assume X = Max
              ST  R5, Min         ; Assume X = Min
              ADD R5, R1, #0      ; Load Y
              JSR Compare_MAX        ; Compare MAX
              JSR Compare_MIN        ; Compare MIN
              ADD R5, R2, #0      ; Load Z
              JSR Compare_MAX
              JSR Compare_MIN
              JSR MAIN              

Compare_MAX   LD  R3, Max         ; Loop start: Compare R3(MAX) vs R5
              ADD R6, R5, #0      ; R6 = R5 as temporary variable to compute without affecting R5
              NOT R6, R6          
              ADD R6, R6, #1      ; R6 = - R5
              ADD R3, R3, R6      ; R3 = R3 + R6     or R3 = Max - R5
              BRn New_MAX         ; If Max < R5 => Max = R5
              RET                 ; Else return, keep 'max' as it was 
New_MAX       ST  R5, Max
              RET
                         
Compare_MIN   LD  R4, Min         ; Compare R4(MIN) vs R5
              ADD R6, R5, #0      ; R6 = R4 as temporary variable
              NOT R4, R4
              ADD R4, R4, #1      ; R4 = - R4 = -Min
              ADD R6, R6, R4      ; R6 = R6 - Min   or R6 = R4 - Min 
              BRn New_MIN         ; If R4 < Min, R4 (R5) = New Min
              RET
New_MIN       ST  R5, Min
              RET 


X          .BLKW x0001
Y          .BLKW x0001
Z          .BLKW x0001
Max        .BLKW x0001
Min        .BLKW x0001
tmp        .BLKW x0001
SAVE       .BLKW x0001
SAVE_2     .BLKW x0001
flag       .BLKW x0001
De_ASCII   .FILL #-48
TEN       .FILL #10
HUNDRED   .FILL #100
THOUSAND  .FILL #1000
VANJ      .FILL #10000
msg_MAX .STRINGZ "\nThe MAX number in the list is: "
msg_MIN .STRINGZ "\nThe MIN number in the list is: "
invalid .STRINGZ "\nInvalid input, please enter numbers again: "
var     .BLKW x0001     ; To tell the current variable that we are inputing, to display correct variable when re-enter input. 
X_is    .STRINGZ "X = "        ; indicated by var = 1
Y_is    .STRINGZ "Y = "        ; indicated by var = 2
Z_is    .STRINGZ "Z = "        ; indicated by var = 3

 ;--------------------------------- INPUT subroutine ------------------------
INPUT         ST  R7, SAVE        ; Save initial return Address
              LD  R7, var
              ADD R7, R7, #1 
              ST  R7, var         ; var += 1
INIT_INPUT    AND R6, R6, #0      ; initialize R6
INPUT_LOOP    GETC
              OUT
              ST  R0, tmp         ; Temporary store inputed character
              ADD R0, R0, #-10    ; check for newline character
              BRz EXIT            ; Exit if user hit "Enter"
              JSR CHECK
              LD  R0, tmp         ; IN "CHECK" character in tmp already De_ASCII-ed
              JSR X10_R6          ; 10 x R6, initially R6 = 0  , Note this SUB uses R5, R4
              ADD R6, R6, R0
              JSR INPUT_LOOP

CHECK         LD  R3, tmp         ; Load inputed character
              LD  R0, De_ASCII    ; De_ASCII = -48, check if 47 < R0 < 58
              ADD R0, R3, R0      ; R0 = R3 - 48
              ST  R0, tmp         ; For convenient, store the De_ASCII-ed number to tmp
              BRn ERROR           ; If R0 < 0, non-numberic character ( <48 )  => ERROR
              ADD R0, R0, #-9     ; R0 = (R3 - 48) - 9
              BRp ERROR           ; If R0 > 0, non-numberic character ( >57 )  => also ERROR
              RET                 ; CHECK PASSED, return

X10_R6        ADD R5, R6, #0        ; R5 = R6
              AND R6, R6, #0        ; init R6 = 0
              LD  R4, TEN           ; R4 = 10, countdown from 10, each time add R6 to R6 itself to X10
LOOP_MUL      ADD R6, R6, R5        ; initially R6 = 0, R6 = R6 + R5   (10 times)
              ADD R4, R4, #-1       ; Countdown
              BRp LOOP_MUL
              RET             

EXIT          LD  R7, SAVE   
              JMP R7          
   
ERROR         LEA R0, invalid
              PUTS
              LD  R7, var
              ADD R7, R7, #-1
              BRz X_IS
              ADD R7, R7, #-1
              BRz Y_IS
              LEA R0, Z_is
              PUTS
              JSR INIT_INPUT
X_IS          LEA R0, X_is
              PUTS
              JSR INIT_INPUT
Y_IS          LEA R0, Y_is
              PUTS
              JSR INIT_INPUT
              
;---------------------------- OUTPUT Subroutine ---------------------------------
; NOTE: this Subroutine print out R6 
OUTPUT        ST  R7, SAVE       ; there are JSRs in Subroutine, R7 affected, must store it
              AND R0, R0, #0     ; R0 = 0
              ADD R0, R0, #1
              ST  R0, flag       ; flag = 1, not allow printing 0's until first non-zero digit

MAIN_OUTPUT   LD  R5, VANJ       ; R5 = 10000
              JSR PRINT 
              LD  R5, THOUSAND   ; R5 = 1000
              JSR PRINT
              LD  R5, HUNDRED    ; R5 = 100
              JSR PRINT
              LD  R5, TEN        ; R5 = 10
              JSR PRINT          ; now, R6 should less than 10
; In case number need to be printed is 0, JUMP to "LAST_ZERO" the print the 0
              ADD R5, R6, #0     ; set R5 = R6, check if R6 == 0
              BRz LAST_ZERO
              AND R5, R5, #0     ; else print the last non-zero digit
              ADD R5, R5, #1     ; R5 = 1
              JSR PRINT
              LD  R7, SAVE       ; RETURN
              JMP R7            

LAST_ZERO     LD  R0, De_ASCII   ; R0 = -48
              NOT R0, R0 
              ADD R0, R0, #1     ; R0 = 48 (zero)
              OUT
              LD R7, SAVE
              JMP R7                

PRINT         ST  R7, SAVE_2     ; again store R7 because there are JSRs
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = -R5
              AND R0, R0, #0
PRINT_LOOP    ADD R0, R0, #1     ; R0 = Quotient count , this is the digit that we going to print
              ST  R6, tmp        ; Save R6 to restore it later
              ADD R6, R6, R5     ; R6 = R6 - R5
              BRzp PRINT_LOOP    ; If R6 >= 0, continue subtracting

              LD  R6, tmp        ; Restore last value of R6 before it results in negative
              ADD R0, R0, #-1    ; Eliminate the last Remainder count that result in negative
              BRnp CONTINUE      ; CONINTUE if R0 is non-zero

              LD  R5, flag      
              BRz CONTINUE       ; CONTINUE if flag == 0
              RET                ; Not print out anything, continue the next digit

CONTINUE      AND R5, R5, #0     ; R5 = 0
              ST  R5, flag       ; flag = 0, allow printing 0's from now
              LD  R5, De_ASCII   ; R5 = -48
              NOT R5, R5
              ADD R5, R5, #1     ; R5 = 48
              ADD R0, R0, R5     ; print number in R0
              OUT
              LD  R7, SAVE_2     ; Return to "OUTPUT"
              JMP R7              

.END
