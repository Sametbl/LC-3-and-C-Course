; ================= Version-4 modification ===================
; This version allows Negative input numbers, which is done by entering '-' character once as first character (the only allowed non-numberic number)  
; Algorithm: 
; -  We create a boolean flag that check the first inputed character is hyphen or not. 
; -  This process required a intial input check subroutine "INTIAL_LOOP", the value of the flag only determine once in this loop
; -  If the character input "INTIAL_LOOP" is not '-' then jump the subroutine "CHECK" to determine whether its a valid digit or not.
; -  If hyphen character is entered again, an error message will appear due to inputed non-numberic character
; -  Before exiting after newline character encountered, invert the value of R6 if flag == 1 ( EXIT subroutine )

;   ISSUE: This may cause unexpected behavior if user enters number lower than -35536 ( Ex: -53646). Version 4.2 should try to fix this.

; ================ Important Notes ==================
; We use GETC and OUT, instead of IN (trap_vector) to remove the <Input a character> messgae of IN trap vector. For aesthetic reason.
; Registers involve: R0, R6 and R7 (RET)
; Because there are some JSR instructions in this Subroutine, address stored R7 is modified, we have to save return Address to s label "SAVE".
; R6 is the Output integer

INPUT            ST  R7, SAVE       ; Store return address
INTIAL_LOOP      AND R6, R6, #0     ; make sure R6 = 0
                 AND R0, R0, #0    
                 ST  R0, flag       ; flag = 0: the input expected to be unsigned
                 GETC
                 OUT
                 ST  R0, tmp        ; If R0 is a digit, save it and check it later
                 ADD R0, R0, #-15   ; Because ADD instruction immediate field is between -16 and 15
                 ADD R0, R0, #-15
                 ADD R0, R0, #-15   ; Overall : R0 = R0 - 45  (check for '-' character)
                 BRz IS_SIGNED
                 JSR INITIAL_JUMP   ; if not '-' character, continue inputing, but firstly, check whether the current character a number or non-number.

IS_SIGNED        AND R0, R0, #0
                 ADD R0, R0, #1
                 ST  R0, flag       ; flag = 1: the current inputing number is signed
                 JSR MAIN_LOOP

MAIN_LOOP        GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 ADD R0, R0, #-10   ; Check for newline character (ASCII 10)
                 BRz PRE_EXIT       ; If true, stop inputing and exit
INITIAL_JUMP     JSR CHECK
                 JSR X10_R6         ; R6 = R6 x10
                 LD  R0, tmp        ; Load temporary saved input number(ASCII) to R0
                 ST  R6, tmp        ; Temporary save R6
                 LD  R6, De_ASCII   ; R6 = -48 
                 ADD R0, R0, R6     ; R0 = lastest digit  
                 LD  R6, tmp        ; Return R6
                 ADD R6, R6, R0     ; After each INPUT loop: R6 = (R6 x10) +  R0
                 JSR MAIN_LOOP      ; do INPUT loop

X10_R6           ADD R0, R6, #0     ; R0 = R6 = a = tmp2 ,   a is initial value of R6
                 ST  R0, tmp2
                 AND R6, R6, #0     ; R6 = 0   
                 LD  R0, TEN        ; R0 = 10
X_LOOP           ST  R0, tmp3
                 LD  R0, tmp2       ; tmp2 = a
                 ADD R6, R6, R0     ; R6 = R6 + a
                 LD  R0, tmp3       ; tmp3 initally = 10 
                 ADD R0, R0, #-1    ; tmp3--    
                 BRp X_LOOP         ; While R4 > 0, keeping adding 'a' to R6
                 RET                ; else Return

; Note: tmp must store inputed character, tmp2 stores return address
CHECK            ST  R7, tmp2
                 LD  R7, tmp       
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 10
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
                 LD R7, tmp2
                 JMP R7         

PRE_EXIT         LD  R0, flag
                 ADD R0, R0, #-1    
                 BRnp EXIT          ; if (flag -1) != 0, actually exiting
                 NOT R6, R6
                 ADD R6, R6, #1     ; if (flag -1) == 0, invert R6 before exit
EXIT             LD  R7, SAVE
                 JMP R7
              
ERROR            LD R0, TEN
                 OUT
                 LEA R0, error
                 PUTS
                 HALT
              
error       .STRINGZ "Invalid input, program ended."       
flag        .BLKW x0001
tmp         .BLKW x0001
tmp2        .BLKW x0001  
tmp3        .BLKW x0001
SAVE        .BLKW x0001
TEN         .FILL x000A
De_ASCII    .FILL #-48
