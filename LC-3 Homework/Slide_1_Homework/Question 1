.ORIG x3000
                 LEA R0, prompt1
                 PUTS
                 JSR INPUT
                 LD  R0, tmp        ; load number (already De_ASCII)
                 ADD R1, R0, #0     ; R1 = num1

                 LEA R0, prompt2
                 PUTS
                 LD  R0, var        ; var initally = 0
                 ADD R0, R0, #1     ; var is the current "number" inputing, used for re-enter the number if previous is invalid (0 for 'a', 1 for 'b')
                 ST  R0, var        ; var = 1 
                 JSR INPUT
                 LD  R0, tmp        ; load number (already De_ASCII)
                 ADD R2, R0, #0     ; R1 = num2    

                 JSR R1_X_R2        ; Result store in R3
                 LEA R0, result
                 PUTS
                 JSR OUTPUT
                 HALT

R1_X_R2          ADD R0, R2, #0     ; R0 = R2
                 AND R2, R2, #0     ; R2 = 0
X_LOOP           ADD R3, R2  #0     ; Store result in R3   ( R3 = R2)
                 ADD R2, R2, R0     ; R2 = R2 + R0, until R1 = R1 - 1 = 0 
                 ADD R1, R1, #-1 
                 BRzp X_LOOP        ; if >=  continue adding
                 ST  R3, ans        ; store final result
                 RET
; Because the largest resulti is 9*9 = 81 < 100                
OUTPUT           ST  R7, SAVE
                 LD  R3, ans         ; to ensure R3 = result
                 AND R1, R1, #0      ; inti R1 = 0 , couting second digit of result
COUNT_CHUC       ADD R1, R1, #1      ; R1 += 1  counts "hang chuc"
                 ADD R3, R3, #-10    ; R3 = R3 - 10
                 BRzp COUNT_CHUC     ; if R3 still >= 10 then keep counting "hang chuc"
                 ADD R1, R1, #-1     ; Eliminate the last count that result in Negative, R1 = hang chuc
                 ADD R3, R3, #10     ; Restore the remainder, R3 = hang don vi
                 LD  R2, De_ASCII    ; R2 = -48
                 NOT R2, R2
                 ADD R2, R2, #1      ; R2 = 48
                 ADD R0, R1, R2      ; R0 = R1 (ASCII form)
                 OUT                 ; print out number
                 ADD R0, R3, R2      ; similarly
                 OUT 
                 JSR EXIT
                 

INPUT            ST  R7, SAVE       ; Store return address
MAIN_INPUT       GETC      
                 OUT
                 ST  R0, tmp        ; Temporary save R0, to check for Newline character
                 JSR CHECK          ; JUMP TO CHECK subroutine to check for non-numberic chars   
                 LD  R0, TEN        ; print out newline for aesthetic reason
                 OUT
                 JSR EXIT              
; CHECK Subroutine note: tmp initally store inputed character, tmp2 store return address
CHECK            ST  R7, tmp2
                 LD  R7, tmp        
                 LD  R0, De_ASCII   ; chech if 47 < R0 < 58
                 ADD R0, R7, R0     ; R0 = R7 - 48
                 ST  R0, tmp        ; For convenient, store the De_ASCIIed number
                 BRn ERROR          ; If R0 < 0, non-numberic character ( <48 )
                 ADD R0, R0, #-9    ; R0 = (R7 - 48) - 9
                 BRp ERROR          ; If R0 > 0, non-numberic character ( >57 )
                 LD  R7, tmp2
                 JMP R7
                 
EXIT             LD  R7, SAVE
                 JMP R7
              
ERROR            LD R0, TEN
                 OUT
                 LEA R0, error
                 PUTS
                 LD R0, var
                 BRp print_b
                 LEA R0, a_is
                 PUTS
                 JSR MAIN_INPUT
print_b          LEA R0, b_is
                 PUTS
                 JSR MAIN_INPUT

tmp         .BLKW x0001
tmp2        .BLKW x0001  
SAVE        .BLKW x0001
ans         .BLKW x0001
TEN         .FILL x000A
De_ASCII    .FILL #-48
prompt1     .STRINGZ "Please input a number: a = "
prompt2     .STRINGZ "Please input a number: b = "
result      .STRINGZ "The product of a and b is: a*b = " 
error       .STRINGZ "Invalid input, please enter a number (0 to 9): "  
a_is        .STRINGZ "a = "
b_is        .STRINGZ "b = "
var         .FILL x0000


.END
